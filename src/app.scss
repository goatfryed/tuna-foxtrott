@charset "utf-8";
@import "~bulma/bulma";

.board-viewport {
  display: flex;
  justify-content: center;
  align-items: center;
}

.board {
  display: flex;
  width: min-content;
  height: min-content;
  flex-direction: column;
  flex-wrap: nowrap;
  justify-content: center;

  &.isometric {
    transform: rotateX(60deg) rotateY(0deg) rotateZ(30deg);
  }

  .row {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: center;
  }
}

$cell-size: 5em;
$cell-border-size: 0.25em;

.cell {
  position: relative;
  height: $cell-size + $cell-border-size;
  width: $cell-size + $cell-border-size;
  margin: 0.02 * $cell-size;

  .content {
    @extend .has-text-white;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    background-color: hsla(29, 100%, 33%, 1);
    height: 100%;
    width: 100%;

    &.obstacle {
      background-color: hsl(16, 12%, 18%);
    }
    &.ground {
      background-color: hsla(29, 100%, 33%, 1);
    }
  }

  .interaction {
    @extend .button;
    display: block;
    padding: $cell-border-size;
    height: 100%;
    width: 100%;
    white-space: normal;

    &.friendly {
      background-color: $success-dark;
    }
    &.enemy {
      @extend .is-warning;

      &.canAttack {
        @extend .is-danger;
        background-color: $danger-dark;

        &:hover {
           background-color: $danger;
        }
      }
    }
    &.canMove {
      @extend .is-info;
      background-color: $info-dark;

      &:hover {
        background-color: $info;
      }
    }
    &.isSelected {
      @extend .is-primary;
    }

  }
}

@mixin cell-unit-style($color) {

}

.unit-list {
  display: flex;
  width: auto;
  max-height: 4rem;
  flex-direction: column;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: flex-start;
  align-content: flex-start;

  .unit-entry {

  }
}

// https://css-tricks.com/snippets/sass/placing-items-circle/
@mixin on-circle($item-count, $circle-size, $item-size) {
  position: relative;
  width:  $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none;

  > * {
    display: block;
    position: absolute;
    top:  50%;
    left: 50%;
    width:  $item-size;
    height: $item-size;
    margin: -($item-size / 2);

    $angle: (360 / $item-count);
    $rot: 0;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform:
                rotate($rot * 1deg)
                translate($circle-size / 2)
                rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}